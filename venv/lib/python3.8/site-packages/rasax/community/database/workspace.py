from typing import Text, Any, Dict

import sqlalchemy as sa
from sqlalchemy.orm import relationship, object_session

from rasax.community.database import utils
from rasax.community.database.base import Base
from rasax.community.database.conversation import MessageLog


class Workspace(Base):
    """Represents an NLU Workspace for training data."""

    __tablename__ = "workspace"

    id = sa.Column(sa.Integer, utils.create_sequence(__tablename__), primary_key=True)
    name = sa.Column(sa.String, nullable=False, unique=True)
    message_logs = relationship("MessageLog")
    username = relationship("User", back_populates="default_workspace", uselist=False)

    def as_dict(self) -> Dict[Text, Any]:
        """Return a JSON-like representation of this `Workspace` object.

        Returns:
            Dictionary containing the workspace's attributes.
        """
        session = object_session(self)
        message_logs_count = (
            session.query(MessageLog).filter(MessageLog.workspace_id == self.id).count()
        )

        # FIXME: address in https://github.com/RasaHQ/rasa-x/issues/4974
        last_modified_at = None
        last_modified_by = None

        return {
            "id": self.id,
            "name": self.name,
            "message_logs_count": message_logs_count,
            "last_modified_by": last_modified_by,
            "last_modified_at": last_modified_at,
        }
