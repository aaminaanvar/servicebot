import logging
from http import HTTPStatus

from sanic import Blueprint, response
from sanic.request import Request
from sanic.response import HTTPResponse

import rasax.community.utils.common as common_utils
from rasax.community.api.decorators import rasa_x_scoped, validate_schema
from rasax.community.services.data_service import DataService

logger = logging.getLogger(__name__)


def blueprint() -> Blueprint:
    """Create endpoints related to Workspaces management.

    Returns:
        Sanic `Blueprint` with endpoints.
    """
    workspaces_endpoints = Blueprint("workspaces_endpoints")

    @workspaces_endpoints.route("/workspaces", methods=["GET", "HEAD"])
    @rasa_x_scoped("workspaces.list", allow_api_token=True)
    async def get_workspaces(request: Request) -> HTTPResponse:
        """Return a list of all existing workspaces.

        Args:
            request: Incoming HTTP request.

        Returns:
            HTTP response.
        """
        workspaces = DataService.from_request(request).get_workspaces()
        return response.json(workspaces)

    @workspaces_endpoints.route("/workspaces", methods=["POST"])
    @rasa_x_scoped("workspaces.create", allow_api_token=True)
    @validate_schema("workspace")
    async def create_workspace(request: Request) -> HTTPResponse:
        """Create a new workspace with a specified name.

        Args:
            request: Incoming HTTP request.

        Returns:
            HTTP response.
        """
        try:
            workspace = DataService.from_request(request).create_workspace(
                request.json["name"]
            )

            return response.json(workspace, HTTPStatus.CREATED)
        except ValueError as e:
            logger.error(e)
            return common_utils.error(
                HTTPStatus.BAD_REQUEST,
                "WorkspaceCreationFailed",
                "Failed to create workspace.",
                details=e,
            )

    return workspaces_endpoints
